// Variables globales
let questions = [];
let tempsRestant = 600; // 10 minutes
let timerInterval;

// Charger les questions
document.addEventListener('DOMContentLoaded', () => {
  // Questions originales
  questions = [
    { q: "Que signifie ITIL ?", r: "b", c: ["International Technology Infrastructure Language", "Information Technology Infrastructure Library", "Internet Transport Integration Layer"] },
    { q: "Quel est le but principal d'un service IT selon ITIL ?", r: "b", c: ["Fournir des √©quipements", "Cr√©er de la valeur sans que l'utilisateur g√®re les co√ªts/risques", "Vendre des produits"] },
    { q: "Combien de dimensions identifie ITIL 4 ?", r: "b", c: ["3", "4", "5"] },
    { q: "Laquelle est une pratique ITIL ?", r: "b", c: ["Gestion des √©motions", "Gestion des incidents", "Gestion des cong√©s"] },
    { q: "Quel est le r√¥le du Service Desk ?", r: "c", c: ["G√©rer les ventes", "G√©rer le personnel", "Point de contact unique pour les utilisateurs"] },
    { q: "La cha√Æne de valeur ITIL commence par :", r: "a", c: ["Planifier", "Construire", "Engager"] },
    { q: "ITIL consid√®re que la valeur est :", r: "c", c: ["Cr√©√©e par le fournisseur seul", "Ind√©pendante des r√©sultats", "Co-cr√©√©e avec le client"] },
    { q: "Une interruption de service est appel√©e :", r: "a", c: ["Incident", "Probl√®me", "Erreur"] },
    { q: "Le mod√®le d'am√©lioration continue comporte :", r: "b", c: ["3 √©tapes", "7 √©tapes", "9 √©tapes"] },
    { q: "Un probl√®me est :", r: "c", c: ["Un changement", "Un bug logiciel", "La cause racine d'un ou plusieurs incidents"] },
    { q: "La dimension 'Flux de valeur & processus' concerne :", r: "a", c: ["Les activit√©s coordonn√©es", "Le mat√©riel utilis√©", "Les contrats fournisseurs"] },
    { q: "Combien de pratiques ITIL sont list√©es dans ITIL 4 ?", r: "c", c: ["12", "21", "34"] },
    { q: "L'objectif de la gestion des changements est :", r: "b", c: ["Bloquer tout changement", "Maximiser la r√©ussite des changements", "√âviter les changements"] },
    { q: "Le syst√®me de valeur des services (SVS) comprend :", r: "a", c: ["Cha√Æne de valeur, principes, pratiques, gouvernance", "R√©seaux et syst√®mes", "Plans de formation"] },
    { q: "L'activit√© ITIL 'Engage' signifie :", r: "c", c: ["Analyser les performances", "Livrer les services", "Interagir avec les parties prenantes"] },
    { q: "Quel principe guide recommande de r√©utiliser ce qui fonctionne ?", r: "a", c: ["Commencer l√† o√π vous √™tes", "Progresser par it√©ration", "Penser et travailler de mani√®re holistique"] },
    { q: "Un produit ITIL comprend :", r: "b", c: ["Un serveur uniquement", "Ressources configur√©es pour cr√©er de la valeur", "Un contrat"] },
    { q: "Une demande de service est :", r: "c", c: ["Un incident", "Un probl√®me", "Une requ√™te utilisateur standard"] },
    { q: "Laquelle n'est PAS une des 4 dimensions ?", r: "a", c: ["Dimension strat√©gique", "Information & technologie", "Partenaires & fournisseurs"] },
    { q: "Un exemple de flux de valeur est :", r: "c", c: ["Un r√¥le m√©tier", "Un type de contrat", "Le traitement d'une demande utilisateur"] }
  ];

  // Explications pour chaque question
  const explanations = [
    "ITIL signifie Information Technology Infrastructure Library.",
    "Un service IT vise √† cr√©er de la valeur sans que le client g√®re les co√ªts/risques.",
    "ITIL 4 repose sur 4 dimensions fondamentales.",
    "La gestion des incidents est une pratique ITIL essentielle.",
    "Le Service Desk est le point de contact unique entre IT et utilisateurs.",
    "L'activit√© initiale de la cha√Æne de valeur est ¬´ Planifier ¬ª.",
    "La valeur est co-cr√©√©e avec le client.",
    "Une interruption est un incident.",
    "Le mod√®le d'am√©lioration continue comporte 7 √©tapes.",
    "Un probl√®me est la cause racine d'un ou plusieurs incidents.",
    "La dimension ¬´ flux de valeur & processus ¬ª traite des activit√©s coordonn√©es.",
    "ITIL 4 recense 34 pratiques.",
    "La gestion des changements maximise la r√©ussite des changements.",
    "Le SVS regroupe cha√Æne de valeur, principes, pratiques, gouvernance.",
    "¬´ Engage ¬ª signifie interagir avec les parties prenantes.",
    "Le principe ¬´ Commencer l√† o√π vous √™tes ¬ª recommande la r√©utilisation.",
    "Un produit ITIL est une ressource configur√©e pour cr√©er de la valeur.",
    "Une demande de service est une requ√™te standard.",
    "Il n'existe pas de dimension ¬´ strat√©gique ¬ª dans ITIL 4.",
    "Le traitement d'une demande utilisateur est un exemple de flux de valeur."
  ];

  // G√©n√©rer le formulaire de quiz
  genererQuiz();

  // Activer le bouton m√©langer si pr√©sent
  const btnMelanger = document.getElementById('btnMelanger');
  if (btnMelanger) {
    btnMelanger.addEventListener('click', () => {
      melangerQuestions();
      genererQuiz();
    });
  }

  // Activer le bouton timer si pr√©sent
  const btnTimer = document.getElementById('btnTimer');
  if (btnTimer) {
    btnTimer.addEventListener('click', demarrerTimer);
  }
});

// Fonction pour g√©n√©rer le HTML du quiz
function genererQuiz() {
  const form = document.getElementById("quizForm");
  if (!form) return;

  form.innerHTML = ""; // Vider le formulaire
  
  questions.forEach((q, i) => {
    const id = i + 1;
    let html = `<div class="question">
      <h2>${id}. ${q.q}</h2>`;
    q.c.forEach((c, j) => {
      html += `<label><input type="radio" name="q${id}" value="${String.fromCharCode(97 + j)}"> ${c}</label>`;
    });
    html += `<div class="feedback" id="f${id}"></div>
    </div>`;
    form.innerHTML += html;
  });
}

// Fonction pour m√©langer les questions
function melangerQuestions() {
  for (let i = questions.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [questions[i], questions[j]] = [questions[j], questions[i]];
  }
}

// Fonction pour d√©marrer le timer
function demarrerTimer() {
  // R√©initialiser un timer existant
  if (timerInterval) {
    clearInterval(timerInterval);
  }
  
  // R√©initialiser le temps
  tempsRestant = 600; // 10 minutes
  
  // Mettre √† jour l'affichage du timer
  const timerElement = document.getElementById('timer');
  if (!timerElement) return;
  
  timerElement.style.display = 'block';
  
  // D√©marrer le d√©compte
  timerInterval = setInterval(() => {
    tempsRestant--;
    const minutes = Math.floor(tempsRestant / 60);
    const secondes = tempsRestant % 60;
    timerElement.textContent = `‚è±Ô∏è Temps restant: ${minutes}:${secondes < 10 ? '0' : ''}${secondes}`;
    
    if (tempsRestant <= 0) {
      clearInterval(timerInterval);
      corrigerQuiz(); // Correction automatique
    }
  }, 1000);
}

// Fonction pour corriger le quiz
function corrigerQuiz() {
  // Arr√™ter le timer si actif
  if (timerInterval) {
    clearInterval(timerInterval);
  }

  const explanations = [
    "ITIL signifie Information Technology Infrastructure Library.",
    "Un service IT vise √† cr√©er de la valeur sans que le client g√®re les co√ªts/risques.",
    "ITIL 4 repose sur 4 dimensions fondamentales.",
    "La gestion des incidents est une pratique ITIL essentielle.",
    "Le Service Desk est le point de contact unique entre IT et utilisateurs.",
    "L'activit√© initiale de la cha√Æne de valeur est ¬´ Planifier ¬ª.",
    "La valeur est co-cr√©√©e avec le client.",
    "Une interruption est un incident.",
    "Le mod√®le d'am√©lioration continue comporte 7 √©tapes.",
    "Un probl√®me est la cause racine d'un ou plusieurs incidents.",
    "La dimension ¬´ flux de valeur & processus ¬ª traite des activit√©s coordonn√©es.",
    "ITIL 4 recense 34 pratiques.",
    "La gestion des changements maximise la r√©ussite des changements.",
    "Le SVS regroupe cha√Æne de valeur, principes, pratiques, gouvernance.",
    "¬´ Engage ¬ª signifie interagir avec les parties prenantes.",
    "Le principe ¬´ Commencer l√† o√π vous √™tes ¬ª recommande la r√©utilisation.",
    "Un produit ITIL est une ressource configur√©e pour cr√©er de la valeur.",
    "Une demande de service est une requ√™te standard.",
    "Il n'existe pas de dimension ¬´ strat√©gique ¬ª dans ITIL 4.",
    "Le traitement d'une demande utilisateur est un exemple de flux de valeur."
  ];

  let score = 0;
  
  // Parcourir chaque question et v√©rifier la r√©ponse
  questions.forEach((q, i) => {
    const id = i + 1;
    const selected = document.querySelector(`input[name=q${id}]:checked`);
    const feedback = document.getElementById(`f${id}`);
    const questionDiv = document.querySelector(`.question:nth-child(${id})`);
    
    if (selected && selected.value === q.r) {
      feedback.innerHTML = '<span class="correct">‚úÖ Bonne r√©ponse</span>';
      // Ajouter une animation pour les bonnes r√©ponses
      questionDiv.classList.add('correct-animation');
      score++;
    } else {
      feedback.innerHTML = '<span class="incorrect">‚ùå Mauvaise r√©ponse</span>';
      // Ajouter l'indication de la bonne r√©ponse
      const correctAnswerIndex = q.r.charCodeAt(0) - 97;
      feedback.innerHTML += `<span style="display:block;margin-top:5px;">La bonne r√©ponse √©tait : ${q.c[correctAnswerIndex]}</span>`;
    }
  });
  
  // Afficher le score final
  const scoreElement = document.getElementById("score");
  if (scoreElement) {
    scoreElement.innerHTML = `üéØ Score final : ${score}/${questions.length}`;
  }
  
  // Mettre √† jour et afficher la barre de progression
  const progressContainer = document.getElementById("progress-container");
  const progressBar = document.getElementById("progress-bar");
  
  if (progressContainer && progressBar) {
    const progressPercentage = Math.round((score / questions.length) * 100);
    
    progressContainer.style.display = "block";
    progressBar.style.width = `${progressPercentage}%`;
    progressBar.textContent = `${progressPercentage}%`;
    
    // D√©finir la couleur de la barre en fonction du score
    if (progressPercentage < 50) {
      progressBar.style.background = "linear-gradient(90deg, #e74c3c, #c0392b)";
    } else if (progressPercentage < 75) {
      progressBar.style.background = "linear-gradient(90deg, #f39c12, #d35400)";
    } else {
      progressBar.style.background = "linear-gradient(90deg, #2ecc71, #27ae60)";
    }
  }
  
  // G√©n√©rer les explications
  const list = document.getElementById("explanationList");
  if (list) {
    list.innerHTML = ""; // Vider la liste avant d'ajouter les nouvelles explications
    
    explanations.forEach((exp, i) => {
      const li = document.createElement("li");
      li.innerHTML = `<strong>Q${i+1}:</strong> ${exp}`;
      list.appendChild(li);
    });
    
    // Afficher la section des explications
    const explicationsSection = document.getElementById("explications");
    if (explicationsSection) {
      explicationsSection.style.display = "block";
    }
  }
  
  // Sauvegarder le score dans localStorage
  sauvegarderScore(score);
  
  // Afficher l'historique des scores
  afficherHistorique();
}

// Fonction pour sauvegarder les scores
function sauvegarderScore(score) {
  const historique = JSON.parse(localStorage.getItem('quizScores') || '[]');
  historique.push({
    date: new Date().toISOString(),
    score: score,
    total: questions.length
  });
  localStorage.setItem('quizScores', JSON.stringify(historique));
}

// Fonction pour afficher l'historique des scores
function afficherHistorique() {
  const historiqueElement = document.getElementById('historiqueList');
  const historiqueSection = document.getElementById('historique');
  
  if (!historiqueElement || !historiqueSection) return;
  
  const historique = JSON.parse(localStorage.getItem('quizScores') || '[]');
  
  if (historique.length === 0) return;
  
  historiqueElement.innerHTML = "";
  
  // Trier l'historique du plus r√©cent au plus ancien
  historique.sort((a, b) => new Date(b.date) - new Date(a.date));
  
  // Limiter √† 5 derni√®res entr√©es
  const recentHistorique = historique.slice(0, 5);
  
  recentHistorique.forEach(entry => {
    const date = new Date(entry.date);
    const formattedDate = `${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`;
    const percentage = Math.round((entry.score / entry.total) * 100);
    
    const li = document.createElement('li');
    li.innerHTML = `<strong>${formattedDate}</strong>: ${entry.score}/${entry.total} (${percentage}%)`;
    historiqueElement.appendChild(li);
  });
  
  historiqueSection.style.display = "block";
}